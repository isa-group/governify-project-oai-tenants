---
swagger: "2.0"
info:
  description: >-
    A governify implementation of SLA Check from SLA4OAI specification
    <div class="postman-run-button"
    data-postman-action="collection/import"
    data-postman-var-1="425bd87f1af3472673f7"
    data-postman-param="env%5Blocal%5D=W3sia2V5Ijoic3VwZXJ2aXNvci5ob3N0IiwidmFsdWUiOiJsb2NhbGhvc3Q6NTAwMCIsInR5cGUiOiJ0ZXh0IiwiZW5hYmxlZCI6dHJ1ZSwiaG92ZXJlZCI6ZmFsc2V9LHsia2V5IjoibW9uaXRvci5ob3N0IiwidmFsdWUiOiJsb2NhbGhvc3Q6NTAwMSIsInR5cGUiOiJ0ZXh0IiwiZW5hYmxlZCI6dHJ1ZSwiaG92ZXJlZCI6ZmFsc2V9XQ==&env%5Bheroku%5D=W3sia2V5Ijoic3VwZXJ2aXNvci5ob3N0IiwidmFsdWUiOiJzdXBlcnZpc29yLm9haS5nb3Zlcm5pZnkuaW8iLCJ0eXBlIjoidGV4dCIsImVuYWJsZWQiOnRydWUsImhvdmVyZWQiOmZhbHNlfSx7ImtleSI6Im1vbml0b3IuaG9zdCIsInZhbHVlIjoibW9uaXRvci5vYWkuZ292ZXJuaWZ5LmlvIiwidHlwZSI6InRleHQiLCJlbmFibGVkIjp0cnVlLCJob3ZlcmVkIjpmYWxzZX1d"></div>
    <script type="text/javascript">
      (function (p,o,s,t,m,a,n) {
        !p[s] && (p[s] = function () { (p[t] || (p[t] = [])).push(arguments); });
        !o.getElementById(s+t) && o.getElementsByTagName("head")[0].appendChild((
          (n = o.createElement("script")),
          (n.id = s+t), (n.async = 1), (n.src = m), n
        ));
      }(window, document, "_pm", "PostmanRunObject", "https://run.pstmn.io/button.js"));
    </script>
  version: "1.0.0"
  title: "Supervisor"
  termsOfService: "http://supervisor.sla4oai.governify.io/terms/"
  contact:
    name: "ISA Group"
    url: "http://governify.io"
    email: "isagroup.us@gmail.com"
  license:
    name: Apache License 2.0
    url: "http://www.apache.org/licenses/"
basePath: "/api/v1"
schemes:
- http
consumes:
- "application/json"
produces:
- "application/json"
paths:
  /check:
    post:
      tags:
      - "check"
      description: >-
        The Check endpoint allows to verify the current state of the SLA
        for a  given service and operation in context for a given scope. In the
        essence, the service will respond true or false to notify the provider
        if it is acceptable to fulfill the request (positive case), or on the contrary,
        not acceptable and then, the request should be denied (negative case).
      operationId: "checkPOST"
      parameters:
      - in: "body"
        name: "requestInfo"
        description: "Scope of the current request."
        required: true
        schema:
          $ref: "#/definitions/requestInfo"
      responses:
        200:
          description: "SLA status"
          schema:
            $ref: "#/definitions/slaStatus"
        400:
          description: "Bad request"
          schema:
            $ref: "#/definitions/errorModel"
        401:
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/errorModel"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/errorModel"
      x-swagger-router-controller: "Check"
  /tenants:
    get:
      tags:
      - "tenants"
      description: >-
        This endpoint returns the tenant information that is required,
        you must pass at least one of these parameters.
      operationId: "tenantsGET"
      parameters:
      - name: "apikey"
        in: "query"
        description: "Apikey which identifies a tenant"
        required: false
        type: "string"
      - name: "account"
        in: "query"
        description: "Account which identifies a tennat"
        required: false
        type: "string"
      responses:
        200:
          description: "Scope information that is required"
          schema:
            $ref: "#/definitions/tenant"
        400:
          description: "Bad request"
          schema:
            $ref: "#/definitions/errorModel"
        401:
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/errorModel"
        default:
          description: "Unexpected error"
      x-swagger-router-controller: "Tenants"
definitions:
  tenant:
    type: "object"
    required:
    - "requestedPayload"
    - "scope"
    - "sla"
    properties:
      sla:
        type: "string"
      scope:
        type: "object"
        properties: {}
      requestedPayload:
        type: "object"
        properties: {}
  slaStatus:
    type: "object"
    properties:
      accept:
        type: "boolean"
      quotas:
        type: "array"
        items:
          $ref: "#/definitions/limit"
      rates:
        type: "array"
        items:
          $ref: "#/definitions/limit"
      configuration:
        type: "object"
        properties: {}
      requestedMetrics:
        type: "array"
        items:
          type: "string"
  requestInfo:
    type: "object"
    required:
    - "requestedPayload"
    - "scope"
    - "sla"
    - "ts"
    properties:
      sla:
        type: "string"
      ts:
        type: "string"
      resource:
        type: "string"
      method:
        type: "string"
      scope:
        type: "object"
        properties: {}
      requestedPayload:
        type: "object"
        properties: {}
      environment:
        type: "string"
  limit:
    type: "object"
    properties:
      resource:
        type: "string"
      method:
        type: "string"
      metrics:
        type: "string"
      limit:
        type: "integer"
        format: "int64"
      used:
        type: "integer"
        format: "int64"
      awaitTo:
        type: "string"
  errorModel:
    type: "object"
    required:
    - "code"
    - "message"
    properties:
      code:
        type: "integer"
        format: "int32"
      message:
        type: "string"
